name: First simple pipeline

on:
  pull_request:
    branches: ["main"]
  # Allow starting from the UI.
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
          - prod

env:
  DATABASE_NAME: test-database
  ANOTHER_VARIABLE: "are you hiding this one as well?"
  SECRET_PASSWORD: ${{ secrets.SECRET_PASSWORD }}
  ARTIFACT_NAME: logs

jobs:
  # Name of the job cannot contain spaces.
  first-build-action:
    runs-on: ubuntu-latest
    
    # By adding an environment, not it becomes a deployment pipeline for this environment.
    # Deployments to environments are visible in a separate section in the UI.
    # There are secrets defined for the 'dev' environment in the project settings.
    environment: dev 

    steps:
      - name: first step
        run: echo "This is the first step"
      - name: second step
        run: echo "This is the second step"
      - name: third step - multiple commands
        run: |
          echo "first line"
          echo "second line"
      - name: variables and secrets
        run: |
          echo "env variable: $DATABASE_NAME" # linux runner - can be printed like a regular bash variable
          echo "secret variable: ${{ env.SECRET_PASSWORD }}"
          echo "another variable: ${{ env.ANOTHER_VARIABLE }}"
      - name: create artifact
        run: echo "test" > output.log
      - name: store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            *.log
  
  # This job runs in parallel with the first job.
  second-build-action:
    runs-on: ubuntu-latest

    steps:
      - name: "second build action 1"
        run: echo "second build action step 1"
  
  # This job runs sequential to the previous two jobs.
  sequential-build-action:
    runs-on: ubuntu-latest
    needs: ["first-build-action", "second-build-action"]

    steps:
      - name: sequential build action
        run: echo "sequential build action step \#1"
      - name: print github context
        run: echo "${{ toJson(github) }}"
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: print logs from artifacts
        run: cat output.log
  
  deploy-job:
    runs-on: ubuntu-latest
    needs: "sequential-build-action"
    steps:
      - name: prepare deployment
        run: echo "preparing deployment"
      - name: environment specification
        run: echo "deploying to the '${{ github.event.inputs.environment }}' environment."
      - name: deploy
        run: exit 1
      - name: report
        # The 'if' condition has to have failure() function; otherwise it would be skipped
        # (the default behavior is that if one step fails, then other are skipped).
        if: failure()
        run: |
          echo "running the report"
          echo "this step should be run only when deploy fails"
      - name: report2
        # This step is skipped because there was previously a failure.
        # It doesn't matter that the step before it has succeeded on failure.
        run: echo "will this one be skipped?"

  failure-handling-job:
    runs-on: ubuntu-latest
    needs: deploy-job
    if: failure()
    steps:
      - name: deployment failure handling
        run: echo "I'm being executed because deploy-job failed"
